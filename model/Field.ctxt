#BlueJ class context
comment0.target=Field
comment0.text=\n\ Field\ class\ containing\ the\ information\ of\ the\ grids\ on\ which\ the\ game\ is\ played.\n\ We\ have\ 2\ types\ of\ grids\:\ one\ for\ the\ player\ and\ one\ for\ the\ computer.\n\ This\ is\ a\ 10x10\ grid,\ containing\ 5\ ships\ of\ different\ sizes.\n\ @author\ kelvin.likollari@usi.ch\n
comment1.params=
comment1.target=Field()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Field.\n
comment10.params=
comment10.target=boolean\ isEmpty()
comment10.text=\n\ Method\ to\ check\ if\ the\ arrayField\ is\ empty.\n\n\ @return\ boolean\ true\ if\ the\ arrayField\ is\ empty,\ false\ otherwise\n
comment11.params=
comment11.target=boolean\ isValid()
comment11.text=\n\ Method\ to\ check\ if\ the\ arrayField\ is\ valid.\n\n\ @return\ boolean\ true\ if\ the\ arrayField\ is\ valid,\ false\ otherwise.\n
comment12.params=
comment12.target=java.lang.String[][]\ getField()
comment12.text=\n\ Method\ to\ get\ the\ field\ (board)\ of\ the\ Battleship\ game.\n\ @return\ the\ field\ (board)\ of\ the\ Battleship\ game.\n
comment13.params=x1\ y1
comment13.target=void\ shootGrid(int,\ int)
comment13.text=\n\ This\ method\ is\ used\ to\ check\ whether\ the\ player\ has\ hit\ a\ cell\n\ that\ has\ already\ been\ hit\ before.\n\ Also,\ we\ print\ a\ corresponding\ message\ to\ the\ player.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ cell.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ cell.\n
comment14.params=x1\ y1
comment14.target=boolean\ shootAtCell(int,\ int)
comment14.text=\n\ This\ method\ shoots\ at\ a\ cell.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ cell.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ cell.\n\ @return\ true\ if\ you\ hit\ a\ ship,\ false\ in\ any\ other\ case.\n
comment15.params=
comment15.target=void\ checkWhetherFieldEmpty()
comment15.text=\n\ Method\ that\ checks\ if\ the\ player\ has\ sunk\ all\ ships.\n
comment16.params=x1\ y1
comment16.target=void\ setCellTrue(int,\ int)
comment16.text=\n\ This\ method\ sets\ the\ cell\ given\ to\ true.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ cell.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ cell.\n
comment17.params=x1\ y1
comment17.target=void\ removeShip(int,\ int)
comment17.text=\n\ This\ method\ removes\ a\ ship\ from\ the\ Field.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ ship.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ ship.\n
comment18.params=x1\ y1
comment18.target=boolean\ isValidCoordinate(int,\ int)
comment18.text=\n\ Check\ whether\ the\ coordinates\ are\ valid.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ cell.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ cell.\n\ @return\ true\ if\ the\ coordinates\ are\ valid,\ false\ otherwise.\n
comment19.params=x1\ y1\ direction\ length
comment19.target=boolean\ checkCorrectPlacement(int,\ int,\ int,\ int)
comment19.text=\n\ This\ method\ checks\ whether\ the\ ship\ placement\ is\ valid\ (i.e\ the\ ship\ placement\ is\ in\ bounds\n\ and\ does\ not\ overlap\ with\ other\ ships).\n\ @param\ x1\ \ \ \ \ \ \ \ the\ x\ coordinate\ of\ the\ cell.\n\ @param\ y1\ \ \ \ \ \ \ \ the\ y\ coordinate\ of\ the\ cell.\n\ @param\ direction\ the\ direction\ of\ the\ ship.\n\ @param\ length\ \ \ \ the\ length\ of\ the\ ship.\n\ @return\ true\ if\ the\ ship\ placement\ is\ valid,\ false\ otherwise.\n
comment2.params=iindex\ jindex
comment2.target=Field(int,\ int)
comment2.text=\n\ Constructor\ created\ explicitly\ for\ testing\ purposes.\n\n\ @param\ iindex\ the\ i\ value\ of\ the\ arrayField.\n\ @param\ jindex\ the\ j\ value\ of\ the\ arrayField.\n
comment20.params=
comment20.target=boolean\ checkEmptyField()
comment20.text=\n\ This\ method\ is\ used\ to\ check\ whether\ there\ is\ any\ ship\ placed\ in\ some\ cells\ of\ the\ field.\n\ @return\ boolean\ true\ if\ there\ is\ a\ ship\ in\ the\ field,\ false\ otherwise.\n
comment21.params=x1\ y1\ direction\ length
comment21.target=boolean\ canPlaceShip(int,\ int,\ int,\ int)
comment21.text=\n\ This\ method\ checks\ whether\ a\ ship\ can\ be\ placed\ in\ the\ given\ position.\n\ If\ the\ ship\ can\ be\ placed,\ the\ ship\ is\ placed\ in\ the\ field.\n\ If\ the\ ship\ cannot\ be\ placed,\ the\ method\ returns\ false.\n\ If\ the\ ship\ can\ be\ placed,\ the\ method\ returns\ true.\n\n\ @param\ x1\ \ \ \ \ \ \ \ the\ x\ coordinate\ of\ the\ ship.\n\ @param\ y1\ \ \ \ \ \ \ \ the\ y\ coordinate\ of\ the\ ship.\n\ @param\ direction\ the\ direction\ of\ the\ ship.\n\ @param\ length\ \ \ \ the\ length\ of\ the\ ship.\n\ @return\ boolean\ true\ if\ the\ ship\ can\ be\ placed,\ false\ otherwise.\n
comment22.params=x1\ y1
comment22.target=boolean\ isValidMoveV2(int,\ int)
comment22.text=\n\ This\ method\ checks\ whether\ a\ shot\ can\n\ be\ performed\ in\ a\ given\ position.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ shot.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ shot.\n\ @return\ boolean\ true\ if\ the\ shot\ can\ be\ performed,\ false\ otherwise.\n
comment23.params=x1\ y1
comment23.target=void\ setHit(int,\ int)
comment23.text=\n\ This\ method\ marks\ a\ cell\ of\ the\ field\ as\ hit.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ shot.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ shot.\n
comment24.params=x1\ y1
comment24.target=void\ setMissed(int,\ int)
comment24.text=\n\ This\ method\ marks\ a\ cell\ of\ the\ field\ after\ a\ shot\ as\ missed.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ shot.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ shot.\n
comment25.params=x1\ y1\ size\ direction\ horizontal
comment25.target=boolean\ isValidPlacementForShip(int,\ int,\ int,\ java.lang.String,\ boolean)
comment25.text=\n\ The\ following\ method\ check\ whether\ a\ ship\ can\ be\ placed\ in\ a\ given\ position.\n\n\ @param\ x1\ \ \ \ \ \ \ \ \ the\ x\ coordinate\ of\ the\ ship.\n\ @param\ y1\ \ \ \ \ \ \ \ \ the\ y\ coordinate\ of\ the\ ship.\n\ @param\ size\ \ \ \ \ \ \ the\ size\ of\ the\ ship.\n\ @param\ direction\ \ the\ direction\ of\ the\ ship.\n\ @param\ horizontal\ boolean\ true\ if\ the\ ship\ is\ horizontal,\ false\ otherwise.\n\ @return\ boolean\ true\ if\ the\ ship\ can\ be\ placed,\ false\ otherwise.\n
comment26.params=x1\ y1\ direction\ size\ symbol
comment26.target=void\ setShipOfDifferentSize(int,\ int,\ java.lang.String,\ int,\ java.lang.String)
comment26.text=\n\ The\ following\ method\ sets\ ships\ of\ various\ sizes\ 2\ to\ 5\ in\ the\ field.\n\n\ @param\ x1\ \ \ \ \ \ \ \ the\ x\ coordinate\ of\ where\ the\ ship\ is\ placed.\n\ @param\ y1\ \ \ \ \ \ \ \ the\ y\ coordinate\ of\ where\ the\ ship\ is\ placed.\n\ @param\ direction\ the\ direction\ of\ the\ ship.\n\ @param\ size\ \ \ \ \ \ the\ size\ of\ the\ ship.\n\ @param\ symbol\ \ \ \ the\ symbol\ of\ the\ ship.\n
comment27.params=x1\ y1
comment27.target=boolean\ checkWhetherHitWasSuccessful(int,\ int)
comment27.text=\n\ The\ following\ method\ checks\ whether\ a\ shot\ is\ valid\ or\ not.\n\n\ @param\ x1\ x\ coordinate\ of\ the\ shot.\n\ @param\ y1\ y\ coordinate\ of\ the\ shot.\n\ @return\ true\ if\ the\ shot\ is\ valid,\ false\ otherwise.\n
comment28.params=x1\ y1\ direction\ size\ symbol
comment28.target=void\ directionOnWhereToSetShip(int,\ int,\ java.lang.String,\ int,\ java.lang.String)
comment28.text=\n\ The\ following\ method\ checks\ the\ direction\ of\ where\ to\ place\ the\ ship.\n\n\ @param\ x1\ \ \ \ \ \ \ \ x\ coordinate\ of\ the\ ship.\n\ @param\ y1\ \ \ \ \ \ \ \ y\ coordinate\ of\ the\ ship.\n\ @param\ direction\ direction\ of\ the\ ship.\n\ @param\ size\ \ \ \ \ \ size\ of\ the\ ship.\n\ @param\ symbol\ \ \ \ symbol\ of\ the\ ship.\n
comment29.params=
comment29.target=void\ placeShipRandomly()
comment29.text=\n\ Method\ that\ places\ a\ ship\ randomly.\n
comment3.params=arrayfield
comment3.target=void\ setArrayField(boolean[][])
comment3.text=\n\ Method\ to\ set\ the\ value\ of\ the\ arrayField.\n\n\ @param\ arrayfield\ the\ arrayField\ to\ set.\n
comment30.params=xx\ yy\ direction\ len
comment30.target=void\ insertShipAtValidCoords(int,\ int,\ int,\ int)
comment30.text=\n\ The\ following\ method\ inserts\ a\ ship\ at\ a\ valid\ position.\n\ @param\ xx\ \ \ \ \ \ \ \ x\ coordinate\ of\ the\ ship.\n\ @param\ yy\ \ \ \ \ \ \ \ y\ coordinate\ of\ the\ ship.\n\ @param\ direction\ direction\ of\ the\ ship.\n\ @param\ len\ \ \ \ \ \ size\ of\ the\ ship.\n
comment31.params=
comment31.target=void\ toggleCheatMode()
comment31.text=\n\ Method\ that\ enables\ cheat\ mode.\n
comment32.params=
comment32.target=void\ hideCheatMode()
comment32.text=\n\ Method\ that\ hides\ the\ ship.\n
comment33.params=
comment33.target=void\ revealShips()
comment33.text=\n\ Method\ that\ reveals\ the\ ships\ on\ the\ grid.\n
comment34.params=index1\ index2
comment34.target=boolean\ isOccupiedByShip(int,\ int)
comment34.text=\n\ Method\ that\ checks\ if\ a\ cell\ is\ occupied\ by\ a\ ship.\n\ @param\ index1\ represents\ the\ coordinate\ on\ the\ x\ axis.\n\ @param\ index2\ represents\ the\ coordinate\ on\ the\ y\ axis.\n\ @return\ boolean\ that\ represents\ whether\ the\ cell\ is\ occupied\ or\ not.\n
comment4.params=arrayfield
comment4.target=void\ setArrayFieldV2(Field)
comment4.text=\n\ Method\ to\ set\ the\ value\ of\ the\ arrayField.\n\ Method\ created\ explicitly\ for\ testing\ purposes.\ TODO\:\ Might\ have\ to\ be\ removed.\n\n\ @param\ arrayfield\ the\ arrayField\ to\ set.\n
comment5.params=
comment5.target=boolean[][]\ getArrayField()
comment5.text=\n\ Method\ to\ get\ the\ value\ of\ the\ arrayField.\n\ @return\ arrayField\ the\ arrayField.\n
comment6.params=x1\ y1\ value
comment6.target=void\ setCellValue(int,\ int,\ boolean)
comment6.text=\n\ Method\ to\ set\ the\ value\ of\ a\ specific\ cell\ in\ the\ arrayField.\n\ @param\ x1\ \ \ \ the\ x\ coordinate\ of\ the\ cell\n\ @param\ y1\ \ \ \ the\ y\ coordinate\ of\ the\ cell\n\ @param\ value\ the\ value\ to\ set\n
comment7.params=x1\ y1
comment7.target=boolean\ getCellValue(int,\ int)
comment7.text=\n\ Method\ to\ get\ the\ value\ of\ a\ specific\ cell\ in\ the\ arrayField.\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ cell\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ cell\n\ @return\ value\ of\ the\ cell\n
comment8.params=x1\ y1
comment8.target=boolean\ getCell(int,\ int)
comment8.text=\n\ This\ method\ is\ used\ to\ know\ the\ content\ of\ a\ cell\ in\ the\ 2D\ array.\n\n\ @param\ x1\ the\ x\ coordinate\ of\ the\ cell.\n\ @param\ y1\ the\ y\ coordinate\ of\ the\ cell.\n\ @return\ boolean\ true\ if\ the\ cell\ is\ occupied,\ false\ otherwise.\n
comment9.params=
comment9.target=boolean\ isFull()
comment9.text=\n\ Method\ to\ check\ if\ the\ arrayField\ is\ full.\n\n\ @return\ boolean\ true\ if\ the\ arrayField\ is\ full,\ false\ otherwise\n
numComments=35
